from django.db import models
from django.core.exceptions import ValidationError

# Create your models here.

class SessaoQuemSomos(models.Model):
    """
    Model para gerenciar o conte√∫do da Sess√£o 1 - Quem Somos
    Apenas um registro deve existir (Singleton)
    """
    # Identifica√ß√£o da sess√£o
    nome_sessao = models.CharField(
        max_length=100,
        default="Quem Somos",
        verbose_name="Nome da Sess√£o"
    )
    
    # T√≠tulos
    titulo_principal = models.CharField(
        max_length=200,
        default="Somos um Hub de Inova√ß√£o da",
        verbose_name="T√≠tulo Principal"
    )
    
    titulo_azul = models.CharField(
        max_length=100,
        default="SECTIDE Nova Friburgo",
        verbose_name="T√≠tulo em Azul"
    )
    
    # Par√°grafos
    paragrafo_1 = models.TextField(
        default="Atuamos no desenvolvimento cient√≠fico, tecnol√≥gico, econ√¥mico e na transforma√ß√£o digital de Nova Friburgo. Acreditamos que iniciativas em inova√ß√£o, startups e empresas de base tecnol√≥gica constroem alicerces s√≥lidos rumo √† CIDADE INTELIGENTE. Projetos que unem ci√™ncia, tecnologia e empreendedorismo s√£o a base para um futuro conectado, sustent√°vel e inclusivo.",
        verbose_name="Primeiro Par√°grafo"
    )
    
    paragrafo_2 = models.TextField(
        default="<strong style=\"color: #1e40af;\">PONTI - Hub de Inova√ß√£o</strong> √© a <strong style=\"color: #1e40af;\">BASE DE LAN√áAMENTO DE FOGUETES</strong> da Secret√°ria Municipal de Ci√™ncia, Tecnologia, Inova√ß√£o e Desenvolvimento Econ√¥mico de Nova Friburgo.",
        verbose_name="Segundo Par√°grafo"
    )
    
    # Imagem
    imagem = models.ImageField(
        upload_to='sessoes/quem_somos/',
        blank=True,
        null=True,
        verbose_name="Imagem da Sess√£o"
    )
    
    # Controles de estado
    ativo = models.BooleanField(
        default=True,
        verbose_name="Ativo"
    )
    
    criado_em = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Criado em"
    )
    
    atualizado_em = models.DateTimeField(
        auto_now=True,
        verbose_name="Atualizado em"
    )
    
    class Meta:
        verbose_name = "Sess√£o - Quem Somos"
        verbose_name_plural = "SESS√ïES - Quem Somos"
        ordering = ['-criado_em']
    
    def clean(self):
        """Valida√ß√£o para garantir apenas um registro"""
        if not self.pk and SessaoQuemSomos.objects.exists():
            raise ValidationError('Apenas um registro de "Quem Somos" √© permitido. Edite o registro existente.')
    
    def save(self, *args, **kwargs):
        """Override do save para garantir apenas um registro"""
        self.clean()
        super().save(*args, **kwargs)
    
    def delete(self, *args, **kwargs):
        """Impede a exclus√£o do registro"""
        raise ValidationError('Este registro n√£o pode ser exclu√≠do. Apenas editado.')
    
    @classmethod
    def get_instancia(cls):
        """M√©todo para obter ou criar a inst√¢ncia √∫nica"""
        instancia, created = cls.objects.get_or_create(
            pk=1,
            defaults={
                'nome_sessao': 'Quem Somos',
                'titulo_principal': 'Somos um Hub de Inova√ß√£o da',
                'titulo_azul': 'SECTIDE Nova Friburgo',
            }
        )
        return instancia
    
    def __str__(self):
        return f"{self.nome_sessao} - {self.titulo_principal}"
    
    def get_imagem_url(self):
        """Retorna URL da imagem ou placeholder"""
        if self.imagem:
            return self.imagem.url
        return None


class CardQuemSomos(models.Model):
    """
    Model para gerenciar os cards da Sess√£o Quem Somos
    Permite cards din√¢micos com dados iniciais padr√£o
    """
    # Conte√∫do do card
    titulo = models.CharField(
        max_length=100,
        verbose_name="T√≠tulo do Card"
    )
    
    corpo = models.TextField(
        verbose_name="Conte√∫do do Card"
    )
    
    # Ordem e controles
    ordem = models.PositiveIntegerField(
        default=1,
        verbose_name="Ordem de Exibi√ß√£o",
        help_text="Ordem em que o card ser√° exibido (1, 2, 3...)"
    )
    
    ativo = models.BooleanField(
        default=True,
        verbose_name="Ativo"
    )
    
    criado_em = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Criado em"
    )
    
    atualizado_em = models.DateTimeField(
        auto_now=True,
        verbose_name="Atualizado em"
    )
    
    class Meta:
        verbose_name = "Card - Quem Somos"
        verbose_name_plural = "CARDS - Quem Somos"
        ordering = ['ordem', 'criado_em']
        unique_together = ['ordem']
    
    @classmethod
    def criar_cards_iniciais(cls):
        """Cria os cards iniciais se n√£o existirem"""
        if not cls.objects.exists():
            cards_iniciais = [
                {
                    'titulo': 'Nossa Miss√£o',
                    'corpo': 'Promover o desenvolvimento cient√≠fico, tecnol√≥gico e econ√¥mico de Nova Friburgo, transformando processos anal√≥gicos em solu√ß√µes digitais integradas. Desenvolvemos sistematicamente tecnologias, startups e empresas de base tecnol√≥gica atrav√©s da colabora√ß√£o entre setores p√∫blico e privado.',
                    'ordem': 1
                },
                {
                    'titulo': 'Nossa Vis√£o',
                    'corpo': 'Consolidar Nova Friburgo como uma cidade inteligente e refer√™ncia em inova√ß√£o. A PONTI √© a "BASE DE LAN√áAMENTO DE FOGUETES" da SECTIDE, formando caminhos s√≥lidos rumo ao futuro tecnol√≥gico atrav√©s de startups e empresas inovadoras.',
                    'ordem': 2
                },
                {
                    'titulo': 'Nossos Objetivos',
                    'corpo': 'Fomentar e desenvolver o empreendedorismo em Nova Friburgo, agregando valor desde a cria√ß√£o de novas empresas at√© o desenvolvimento das j√° existentes. Criamos um ambiente promotor de inova√ß√£o, potencializamos voca√ß√µes locais, atra√≠mos investimentos e disponibilizamos estrutura de apoio.',
                    'ordem': 3
                }
            ]
            
            for card_data in cards_iniciais:
                cls.objects.create(**card_data)
            
            return True
        return False
    
    @classmethod
    def get_cards_ativos(cls):
        """Retorna todos os cards ativos ordenados"""
        cards = cls.objects.filter(ativo=True).order_by('ordem')
        if not cards.exists():
            cls.criar_cards_iniciais()
            cards = cls.objects.filter(ativo=True).order_by('ordem')
        return cards
    
    def __str__(self):
        return f"{self.ordem}. {self.titulo}"
    
    def save(self, *args, **kwargs):
        """Override do save para validar ordem"""
        if not self.ordem:
            # Se n√£o foi especificada uma ordem, usar a pr√≥xima dispon√≠vel
            ultima_ordem = CardQuemSomos.objects.aggregate(
                max_ordem=models.Max('ordem')
            )['max_ordem']
            self.ordem = (ultima_ordem or 0) + 1
        super().save(*args, **kwargs)


class SessaoOndeAtuamos(models.Model):
    """
    Model para gerenciar o conte√∫do da Sess√£o Onde Atuamos
    Apenas um registro deve existir (Singleton)
    """
    # Identifica√ß√£o da sess√£o
    nome_sessao = models.CharField(
        max_length=100,
        default="Onde Atuamos",
        verbose_name="Nome da Sess√£o"
    )
    
    # Emoji e t√≠tulo do badge
    emoji_badge = models.CharField(
        max_length=10,
        default="üéØ",
        verbose_name="Emoji do Badge"
    )
    
    titulo_badge = models.CharField(
        max_length=50,
        default="Onde Atuamos",
        verbose_name="T√≠tulo do Badge"
    )
    
    # Subt√≠tulo descritivo
    subtitulo = models.CharField(
        max_length=200,
        default="Foco na transforma√ß√£o digital com desenvolvimento cient√≠fico, tecnol√≥gico, inovador e econ√¥mico",
        verbose_name="Subt√≠tulo"
    )
    
    # T√≠tulo principal da descri√ß√£o
    titulo_principal = models.CharField(
        max_length=200,
        default="Forma√ß√£o, Inova√ß√£o e Oportunidades",
        verbose_name="T√≠tulo Principal"
    )
    
    # Descri√ß√£o principal
    descricao_principal = models.TextField(
        default="Nova Friburgo possui grande potencial para o desenvolvimento de neg√≥cios que tenham como base a inova√ß√£o e a tecnologia, destacando-se que o ensino e o aprendizado est√£o estruturados numa larga capacidade de forma√ß√£o e desenvolvimento profissional existentes nas diversas institui√ß√µes de ensino p√∫blico e privado de n√≠vel superior instaladas na regi√£o e tamb√©m na oferta de uma robusta rede de educa√ß√£o t√©cnica e profissionalizante que visa preparar profissionais altamente qualificados para as diversas atividades setoriais como: ind√∫stria metal mec√¢nica, ind√∫stria t√™xtil, ind√∫stria aliment√≠cia, com√©rcio, servi√ßos, educa√ß√£o, sa√∫de, transportes, distribui√ß√£o, tecnologia, agroneg√≥cio e turismo.",
        verbose_name="Descri√ß√£o Principal"
    )
    
    # Imagem principal
    imagem_principal = models.ImageField(
        upload_to='sessoes/onde_atuamos/',
        blank=True,
        null=True,
        verbose_name="Imagem Principal",
        help_text="Imagem que ser√° exibida na descri√ß√£o principal"
    )
    
    # URL da imagem como alternativa
    url_imagem_principal = models.URLField(
        blank=True,
        null=True,
        verbose_name="URL da Imagem Principal",
        help_text="URL alternativa para a imagem (se n√£o houver upload)"
    )
    
    # Controles de estado
    ativo = models.BooleanField(
        default=True,
        verbose_name="Ativo"
    )
    
    criado_em = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Criado em"
    )
    
    atualizado_em = models.DateTimeField(
        auto_now=True,
        verbose_name="Atualizado em"
    )
    
    class Meta:
        verbose_name = "Sess√£o - Onde Atuamos"
        verbose_name_plural = "SESS√ïES - Onde Atuamos"
        ordering = ['-criado_em']
    
    def clean(self):
        """Valida√ß√£o para garantir apenas um registro"""
        if not self.pk and SessaoOndeAtuamos.objects.exists():
            raise ValidationError('Apenas um registro de "Onde Atuamos" √© permitido. Edite o registro existente.')
    
    def save(self, *args, **kwargs):
        """Override do save para garantir apenas um registro"""
        self.clean()
        super().save(*args, **kwargs)
    
    def delete(self, *args, **kwargs):
        """Impede a exclus√£o do registro"""
        raise ValidationError('Este registro n√£o pode ser exclu√≠do. Apenas editado.')
    
    @classmethod
    def get_instancia(cls):
        """M√©todo para obter ou criar a inst√¢ncia √∫nica"""
        instancia, created = cls.objects.get_or_create(
            pk=1,
            defaults={
                'nome_sessao': 'Onde Atuamos',
                'emoji_badge': 'üéØ',
                'titulo_badge': 'Onde Atuamos',
                'subtitulo': 'Foco na transforma√ß√£o digital com desenvolvimento cient√≠fico, tecnol√≥gico, inovador e econ√¥mico',
                'titulo_principal': 'Forma√ß√£o, Inova√ß√£o e Oportunidades',
            }
        )
        return instancia
    
    def get_imagem_url(self):
        """Retorna URL da imagem principal"""
        if self.imagem_principal:
            return self.imagem_principal.url
        elif self.url_imagem_principal:
            return self.url_imagem_principal
        return "/static/assets/images/friburgo.jpg"  # Fallback padr√£o
    
    def __str__(self):
        return f"{self.nome_sessao} - {self.titulo_principal}"


class AreaAtuacao(models.Model):
    """
    Model para gerenciar as √°reas de atua√ß√£o da PONTI
    Cards din√¢micos para a se√ß√£o Onde Atuamos
    """
    # Conte√∫do da √°rea
    titulo = models.CharField(
        max_length=100,
        verbose_name="T√≠tulo da √Årea"
    )
    
    icone = models.CharField(
        max_length=50,
        blank=True,
        verbose_name="√çcone (Classe CSS)",
        help_text="Classe CSS para o √≠cone (ex: fa-solid fa-industry). Pode ficar vazio."
    )   
    corpo = models.TextField(
        verbose_name="Corpo/Descri√ß√£o da √Årea",
        default="Descri√ß√£o da √°rea de atua√ß√£o."
    )
    
    # Badges/Tags
    badges = models.CharField(
        max_length=200,
        blank=True,
        verbose_name="Badges",
        help_text="Badges separadas por v√≠rgula (ex: Automa√ß√£o, Inova√ß√£o). Pode ficar vazio."
    )
    
    # Ordem e controles
    ordem = models.PositiveIntegerField(
        default=1,
        verbose_name="Ordem de Exibi√ß√£o"
    )
    
    ativo = models.BooleanField(
        default=False,  # Por padr√£o desativado
        verbose_name="Ativo"
    )
    
    criado_em = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Criado em"
    )
    
    atualizado_em = models.DateTimeField(
        auto_now=True,
        verbose_name="Atualizado em"
    )
    
    class Meta:
        verbose_name = "√Årea de Atua√ß√£o"
        verbose_name_plural = "√ÅREAS DE ATUA√á√ÉO"
        ordering = ['ordem', 'criado_em']
        unique_together = ['ordem']
    
    @classmethod
    def criar_areas_iniciais(cls):
        """Cria √°reas iniciais se n√£o existirem"""
        if not cls.objects.exists():
            areas_iniciais = [
                {
                    'titulo': 'Ind√∫stria Metal Mec√¢nica',
                    'corpo': 'Desenvolvimento e inova√ß√£o no setor metal mec√¢nico com foco em novas tecnologias e processos industriais avan√ßados, promovendo a moderniza√ß√£o e competitividade das empresas locais.',
                    'badges': 'Automa√ß√£o, Inova√ß√£o',
                    'ordem': 1,
                    'ativo': False
                },
                {
                    'titulo': 'Ind√∫stria T√™xtil',
                    'corpo': 'Transforma√ß√£o digital e inova√ß√£o na ind√∫stria t√™xtil, promovendo moderniza√ß√£o e competitividade no setor atrav√©s de tecnologias avan√ßadas e processos sustent√°veis.',
                    'badges': 'Digitaliza√ß√£o, Sustentabilidade',
                    'ordem': 2,
                    'ativo': False
                },
                {
                    'titulo': 'Tecnologia e Inova√ß√£o',
                    'corpo': 'Desenvolvimento de startups e empresas de base tecnol√≥gica nos setores de educa√ß√£o, sa√∫de, transportes, distribui√ß√£o, agroneg√≥cio e turismo, criando um ecossistema inovador.',
                    'badges': 'Startups, Ecossistema',
                    'ordem': 3,
                    'ativo': False
                }
            ]
            
            for area_data in areas_iniciais:
                cls.objects.create(**area_data)
            
            return True
        return False
    
    @classmethod
    def get_areas_ativas(cls):
        """Retorna todas as √°reas ativas ordenadas"""
        areas = cls.objects.filter(ativo=True).order_by('ordem')
        # Se n√£o existem registros, cria os iniciais (mas n√£o for√ßa a ativa√ß√£o)
        if not cls.objects.exists():
            cls.criar_areas_iniciais()
            areas = cls.objects.filter(ativo=True).order_by('ordem')
        return areas
    
    def get_badges_list(self):
        """Retorna badges como lista"""
        if self.badges:
            return [badge.strip() for badge in self.badges.split(',') if badge.strip()]
        return []
    
    def __str__(self):
        return f"{self.ordem}. {self.titulo}"
    
    def save(self, *args, **kwargs):
        """Override do save para validar ordem"""
        if not self.ordem:
            ultima_ordem = AreaAtuacao.objects.aggregate(
                max_ordem=models.Max('ordem')
            )['max_ordem']
            self.ordem = (ultima_ordem or 0) + 1
        super().save(*args, **kwargs)


class Configuracoes(models.Model):
    """
    Model para gerenciar as configura√ß√µes gerais do site
    Apenas um registro deve existir (Singleton)
    """
    # Logos
    logo_header = models.ImageField(
        upload_to='configuracoes/logos/',
        blank=True,
        null=True,
        verbose_name="Logo do Header",
        help_text="Logo que aparece no cabe√ßalho do site"
    )
    
    logo_geral = models.ImageField(
        upload_to='configuracoes/logos/',
        blank=True,
        null=True,
        verbose_name="Logo Geral",
        help_text="Logo para footer e demais se√ß√µes"
    )
    
    logo_hero = models.ImageField(
        upload_to='configuracoes/logos/',
        blank=True,
        null=True,
        verbose_name="Logo Hero",
        help_text="Logo para se√ß√£o hero e 'desenvolvido por'"
    )
    
    # Informa√ß√µes de contato
    endereco = models.TextField(
        default="Rua Exemplo, 123<br>Centro - Nova Friburgo/RJ<br>CEP: 28600-000",
        verbose_name="Endere√ßo",
        help_text="Use <br> para quebras de linha"
    )
    
    telefone = models.TextField(
        default="(22) 1234-5678<br>(22) 9 8765-4321",
        verbose_name="Telefone",
        help_text="Use <br> para quebras de linha"
    )
    
    horario_funcionamento = models.TextField(
        default="Segunda a Sexta: 8h √†s 17h<br>S√°bado: 8h √†s 12h<br>Domingo: Fechado",
        verbose_name="Hor√°rio de Funcionamento",
        help_text="Use <br> para quebras de linha"
    )
    
    # Texto do rodap√©
    texto_rodape = models.TextField(
        default="Fomentando o ecossistema de inova√ß√£o e empreendedorismo em Nova Friburgo, conectando ideias transformadoras com oportunidades reais.",
        verbose_name="Texto do Rodap√©",
        help_text="Texto descritivo que aparece no rodap√© do site"
    )
    
    # Redes sociais
    instagram = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="Instagram",
        help_text="URL do perfil do Instagram"
    )
    
    facebook = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="Facebook",
        help_text="URL da p√°gina do Facebook"
    )
    
    whatsapp = models.CharField(
        max_length=20,
        blank=True,
        verbose_name="WhatsApp",
        help_text="N√∫mero do WhatsApp (ex: 5522987654321)"
    )
    
    # Controles de estado
    ativo = models.BooleanField(
        default=True,
        verbose_name="Ativo"
    )
    
    criado_em = models.DateTimeField(
        auto_now_add=True,
        verbose_name="Criado em"
    )
    
    atualizado_em = models.DateTimeField(
        auto_now=True,
        verbose_name="Atualizado em"
    )
    
    class Meta:
        verbose_name = "Configura√ß√£o"
        verbose_name_plural = "CONFIGURA√á√ïES"
        ordering = ['-criado_em']
    
    def clean(self):
        """Valida√ß√£o para garantir apenas um registro"""
        if not self.pk and Configuracoes.objects.exists():
            raise ValidationError('Apenas um registro de "Configura√ß√µes" √© permitido. Edite o registro existente.')
    
    def save(self, *args, **kwargs):
        """Override do save para garantir apenas um registro"""
        self.clean()
        super().save(*args, **kwargs)
    
    def delete(self, *args, **kwargs):
        """Impede a exclus√£o do registro"""
        raise ValidationError('Este registro n√£o pode ser exclu√≠do. Apenas editado.')
    
    @classmethod
    def get_instancia(cls):
        """M√©todo para obter ou criar a inst√¢ncia √∫nica"""
        instancia, created = cls.objects.get_or_create(
            pk=1,
            defaults={
                'endereco': 'Rua Exemplo, 123<br>Centro - Nova Friburgo/RJ<br>CEP: 28600-000',
                'telefone': '(22) 1234-5678<br>(22) 9 8765-4321',
                'horario_funcionamento': 'Segunda a Sexta: 8h √†s 17h<br>S√°bado: 8h √†s 12h<br>Domingo: Fechado',
                'texto_rodape': 'Fomentando o ecossistema de inova√ß√£o e empreendedorismo em Nova Friburgo, conectando ideias transformadoras com oportunidades reais.'
            }
        )
        return instancia
    
    def get_logo_header_url(self):
        """Retorna URL da logo do header"""
        if self.logo_header:
            return self.logo_header.url
        return "/static/assets/images/logo_pmnf.png"  # Fallback para logo original do header
    
    def get_logo_geral_url(self):
        """Retorna URL da logo geral"""
        if self.logo_geral:
            return self.logo_geral.url
        return "/static/assets/images/logo_com_pmnf.png"  # Fallback para logo original do footer
    
    def get_logo_hero_url(self):
        """Retorna URL da logo hero"""
        if self.logo_hero:
            return self.logo_hero.url
        return "/static/assets/images/logo.png"  # Fallback para logo original do hero
    
    def get_whatsapp_url(self):
        """Retorna URL formatada para WhatsApp"""
        if self.whatsapp:
            return f"https://wa.me/{self.whatsapp}"
        return None
    
    def __str__(self):
        return "Configura√ß√µes do Site"
